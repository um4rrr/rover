//final slave (Mega)

#include <Servo.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

RF24 radio(7, 8); // CE, CSN

const byte address1[6] = "00001";
const byte address2[6] = "00002";

Servo servo;

#define servopin 35
#define ENA 12
#define ENB 10
#define motor1pin1 31
#define motor1pin2 29
#define motor2pin1 27
#define motor2pin2 25

// defining constant value
#define origin 90
#define right 45
#define exright 0
#define left 135
#define exleft 180
#define slowspeed 100
#define fastspeed 255

#define MQ7 A0
#define MQ11 A1
#define MQ135 A2

int command {0};

int servoangle;
int Speed;

void forward(){
  digitalWrite(motor1pin1, HIGH);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);
}

void backward(){
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, HIGH);
}

void nomovement(){
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, LOW);

  digitalWrite(motor2pin1, LOW);
  digitalWrite(motor2pin2, LOW);
}

void setup() {
  // put your setup code here, to run once:
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);
  servo.attach(servopin);
  pinMode(ENA, OUTPUT); 
  pinMode(ENB, OUTPUT);
  radio.begin();
  radio.openReadingPipe(0, address1);
  radio.setPALevel(RF24_PA_MAX);
  radio.startListening();
  radio.openWritingPipe(address2);
  pinMode(MQ7,INPUT);
  pinMode(MQ11,INPUT);
  pinMode(MQ135,INPUT);
  Serial.begin(9600);
}

void loop() {
  delay(5);
  radio.startListening();
  if (radio.available()){
    while (radio.available()){
      delay(5);
      radio.read(&command, sizeof(command));
      switch (command){
    case 0: servoangle = origin; nomovement(); Speed = 0; break;
    case 1: servoangle = origin; forward(); Speed = fastspeed; break;
    case 2: servoangle = origin; forward(); Speed = slowspeed; break;
    case 3: servoangle = origin; backward(); Speed = slowspeed; break;
    case 4: servoangle = origin; backward(); Speed = fastspeed; break;
    case 5: servoangle = exleft; nomovement(); Speed = 0; break;
    case 6: servoangle = left; nomovement(); Speed = 0; break;
    case 7: servoangle = right; nomovement(); Speed = 0; break;
    case 8: servoangle = exright; nomovement(); Speed = 0; break;
    case 9: servoangle = exleft; forward(); Speed = fastspeed; break;
    case 10: servoangle = left; forward(); Speed = fastspeed; break;
    case 11: servoangle = exleft; forward(); Speed = slowspeed; break;
    case 12: servoangle = left; forward(); Speed = slowspeed; break;
    case 13: servoangle = right; forward(); Speed = fastspeed; break;
    case 14: servoangle = exright; forward(); Speed = fastspeed; break;
    case 15: servoangle = right; forward(); Speed = slowspeed; break;
    case 16: servoangle = exright; forward(); Speed = slowspeed; break;
    case 17: servoangle = exright; backward(); Speed = slowspeed; break;
    case 18: servoangle = right; backward(); Speed = slowspeed; break;
    case 19: servoangle = exright; backward(); Speed = fastspeed; break;
    case 20: servoangle = right; backward(); Speed = fastspeed; break;
    case 21: servoangle = left; backward(); Speed = slowspeed; break;
    case 22: servoangle = exleft; backward(); Speed = slowspeed; break;
    case 23: servoangle = left; backward(); Speed = fastspeed; break;
    case 24: servoangle = exleft; backward(); Speed = fastspeed; break;
  }
    analogWrite(ENB, Speed);
    analogWrite(ENA, Speed);
    servo.write(servoangle);

    if (command == 3 || command == 4){
     delay(5);
    radio.stopListening();
    int reading2 = analogRead(MQ7);
    Serial.println(reading2);
    radio.write(&reading2, sizeof(reading2));
  }
    if (command == 5 || command == 6){
    radio.stopListening();
    int reading3 = analogRead(MQ135);
    radio.write(&reading3, sizeof(reading3));
  }
  if (command == 7 || command == 8){
    radio.stopListening();
    int reading4 = analogRead(MQ11);
    radio.write(&reading4, sizeof(reading4));
    }
  }
  
}
}
